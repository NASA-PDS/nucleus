name: 'Terraform-Workflow'

#Currently this workflow is disabled since resources were already deployed manually in NGAP.

on:
  # push:
  workflow_dispatch:

permissions:
  id-token: write  # required to use OIDC authentication
  contents: read # required to checkout the code from the repo

jobs:
  deploy:
    name: 'Terraform'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    env:
      TF_LOG: INFO

    steps:
    - name: Checkout
      uses: actions/checkout@v5

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v5
      with:
        aws-region: "${{ secrets.AWS_REGION }}"
        role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
        role-session-name: PDS_GitHub_OIDC_TERRAFORM

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Fmt, Init & Validate
      id: fmt_init_validate
      env:
        AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME}}
        AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME}}
      run: |
        terraform fmt
        terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}"
        terraform validate -no-color

    - name: Terraform Plan
      id: plan
      env:
        TF_VAR_efs_file_system_id: "${{ secrets.EFS_FILE_SYSTEM_ID }}"
        TF_VAR_registry_loader_scripts_access_point_id: "${{ secrets.REGISTRY_LOADER_SCRIPTS_ACCESS_POINT_ID }}"
        TF_VAR_registry_loader_default_configs_access_point_id: "${{ secrets.REGISTRY_LOADER_DEFAULT_CONFIGS_ACCESS_POINT_ID }}"
        TF_VAR_pds_data_access_point_id: "${{ secrets.PDS_DATA_ACCESS_POINT_ID }}"
        TF_VAR_task_role_arn: "${{ secrets.TASK_ROLE_ARN }}"
        TF_VAR_execution_role_arn: "${{ secrets.EXECUTION_ROLE_ARN }}"
        TF_VAR_vpc_id: "${{ secrets.VPC_ID }}"
        TF_VAR_vpc_cidr: "${{ secrets.VPC_CIDR }}"
        TF_VAR_nucleus_security_group_ingress_cidr: "${{ secrets.NUCLEUS_SG_INGRESS_CIDR }}"
        TF_VAR_subnet_ids: "${{ secrets.SUBNET_IDS }}"
        TF_VAR_airflow_execution_role: "${{ secrets.AIRFLOW_EXECUTION_ROLE }}"
      run: terraform plan -no-color
      continue-on-error:  true

    - name: Terraform Plan Status
      id : plan_status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        TF_VAR_efs_file_system_id: "${{ secrets.EFS_FILE_SYSTEM_ID }}"
        TF_VAR_registry_loader_scripts_access_point_id: "${{ secrets.REGISTRY_LOADER_SCRIPTS_ACCESS_POINT_ID }}"
        TF_VAR_registry_loader_default_configs_access_point_id: "${{ secrets.REGISTRY_LOADER_DEFAULT_CONFIGS_ACCESS_POINT_ID }}"
        TF_VAR_pds_data_access_point_id: "${{ secrets.PDS_DATA_ACCESS_POINT_ID }}"
        TF_VAR_task_role_arn: "${{ secrets.TASK_ROLE_ARN }}"
        TF_VAR_execution_role_arn: "${{ secrets.EXECUTION_ROLE_ARN }}"
        TF_VAR_vpc_id: "${{ secrets.VPC_ID }}"
        TF_VAR_vpc_cidr: "${{ secrets.VPC_CIDR }}"
        TF_VAR_nucleus_security_group_ingress_cidr: "${{ secrets.NUCLEUS_SG_INGRESS_CIDR }}"
        TF_VAR_subnet_ids: "${{ secrets.SUBNET_IDS }}"
        TF_VAR_airflow_execution_role: "${{ secrets.AIRFLOW_EXECUTION_ROLE }}"
      run: terraform apply -auto-approve
