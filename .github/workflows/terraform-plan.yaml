name: 'Terraform-Plan'

on:
  push:
    branches:
      - '**'
  pull_request:
    types: [opened, edited, reopened, ready_for_review, review_requested]

permissions:
  id-token: write  # required to use OIDC authentication
  contents: read # required to checkout the code from the repo

jobs:
  deploy:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: NGAP DEV
    env:
      TF_LOG: INFO
      working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-region: "${{ secrets.AWS_REGION }}"
        role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
        role-session-name: PDS_GitHub_OIDC_TERRAFORM

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Fmt, Init & Validate
      id : init
      working-directory: ${{ env.working-directory }}
      run: |
        terraform fmt
        terraform init
        terraform validate -no-color

    - name: Terraform Plan
      id: plan
      working-directory: ${{ env.working-directory }}
      env:
        TF_VAR_efs_file_system_id: "${{ secrets.EFS_FILE_SYSTEM_ID }}"
        TF_VAR_registry_loader_scripts_access_point_id: "${{ secrets.REGISTRY_LOADER_SCRIPTS_ACCESS_POINT_ID }}"
        TF_VAR_registry_loader_default_configs_access_point_id: "${{ secrets.REGISTRY_LOADER_DEFAULT_CONFIGS_ACCESS_POINT_ID }}"
        TF_VAR_task_role_arn: "${{ secrets.TASK_ROLE_ARN }}"
        TF_VAR_execution_role_arn: "${{ secrets.EXECUTION_ROLE_ARN }}"
        TF_VAR_vpc_id: "${{ secrets.VPC_ID }}"
        TF_VAR_vpc_cidr: "${{ secrets.VPC_CIDR }}"
        TF_VAR_nucleus_security_group_ingress_cidr: "${{ secrets.NUCLEUS_SG_INGRESS_CIDR }}"
        TF_VAR_subnet_ids: "${{ secrets.SUBNET_IDS }}"
        TF_VAR_airflow_execution_role: "${{ secrets.AIRFLOW_EXECUTION_ROLE }}"
      run: terraform plan -no-color
      continue-on-error:  true

    - name: Terraform Plan Status
      id : plan_status
      working-directory: ${{ env.working-directory }}
      if: steps.plan.outcome == 'failure'
      run: exit 1
