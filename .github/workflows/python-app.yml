# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    # - name: Set up Python 3.10
    #   uses: actions/setup-python@v3
    #   with:
    #     python-version: "3.10"
    # - name: Install dependencies
    #   working-directory: ./
    #   run: |
    - name: Build docs
      uses: jannekem/run-python-script-action@v1
      with:
        script: |
          import os
          print("Directory contents:")
          for f in os.listdir():
              print(f)

          from .context import Context
          from .errors import InvokedProcessError, RoundupError
          from .errors import MissingEnvVarError
          from .step import ChangeLogStep as BaseChangeLogStep
          from .step import Step, StepName, NullStep, RequirementsStep, DocPublicationStep
          from .util import invoke, invokeGIT, TAG_RE, commit, delete_tags, git_config, add_version_label_to_open_bugs
          from lasso.releasers._python_version import TextFileDetective
          import logging, os, re, shutil
  
          
          _logger.debug('Python preparation step')
          git_config()
          shutil.rmtree('venv', ignore_errors=True)
          # We add access to system site packages so that projects can save time if they need numpy, pandas, etc.
          invoke(['python', '-m', 'venv', '--system-site-packages', 'venv'])
          # Do the pseudo-equivalent of ``activate``:
          venvBin = os.path.abspath(os.path.join(self.assembly.context.cwd, 'venv', 'bin'))
          os.environ['PATH'] = f'{venvBin}:{os.environ["PATH"]}'
          # Make sure we have the latest of pip+setuptools+wheel
          invoke(['pip', 'install', '--quiet', '--upgrade', 'pip', 'setuptools', 'wheel'])
          # #79: ensure that the venv has its own ``sphinx-build``
          invoke(['pip', 'install', '--quiet', '--ignore-installed', f'sphinx=={SPHINX_VERSION}'])
          # Now install the package being rounded up
          invoke(['pip', 'install', '--editable', '.[dev]'])
          # ☑️ TODO: what other prep steps are there? What about VERSION.txt overwriting?
          





        
    # - name: Execute python
    #   run: |
    #     python --version
    #     # sphinx-build docs public -b dirhtml
    #     shutil.rmtree('venv', ignore_errors=True)
    #     # We add access to system site packages so that projects can save time if they need numpy, pandas, etc.
    #     invoke(['python', '-m', 'venv', '--system-site-packages', 'venv'])
    #     # Do the pseudo-equivalent of ``activate``:
    #     venvBin = os.path.abspath(os.path.join(self.assembly.context.cwd, 'venv', 'bin'))
    #     os.environ['PATH'] = f'{venvBin}:{os.environ["PATH"]}'
    #     # Make sure we have the latest of pip+setuptools+wheel
    #     invoke(['pip', 'install', '--quiet', '--upgrade', 'pip', 'setuptools', 'wheel'])
    #     # #79: ensure that the venv has its own ``sphinx-build``
    #     invoke(['pip', 'install', '--quiet', '--ignore-installed', f'sphinx=={SPHINX_VERSION}'])
    #     # Now install the package being rounded up
    #     invoke(['pip', 'install', '--editable', '.[dev]'])
    #     # ☑️ TODO: what other prep steps are there? What about VERSION.txt overwriting?

